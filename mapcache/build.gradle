apply plugin: 'com.android.application'
apply plugin: 'maven'

def googleMapsApiReleaseKey = hasProperty('RELEASE_MAPS_MAPCACHE_API_KEY') ? RELEASE_MAPS_MAPCACHE_API_KEY: ''
def googleMapsApiKeyDebug = hasProperty('DEBUG_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY: ''

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "mil.nga.mapcache"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 21
        versionName '1.20'
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }
        debug {
            minifyEnabled false
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiKeyDebug
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

task androidAppVersion {
    doLast {
        com.android.build.gradle.AppExtension appExt = project.extensions.android;
        println "versionCode: ${appExt.defaultConfig.applicationId}@${appExt.defaultConfig.versionCode}"
        println "versionName: ${appExt.defaultConfig.applicationId}@${appExt.defaultConfig.versionName}"
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile "mil.nga.geopackage.map:geopackage-android-map:3.0.0" // comment out to build locally
    //compile project(':geopackage-map') // uncomment me to build locally
    compile 'com.android.support:multidex:1.0.2'
    androidTestCompile 'com.android.support:multidex:1.0.2'
}

configure extensions.android, {
    if (project.hasProperty('RELEASE_STORE_FILE') && new File((String)project.getProperty('RELEASE_STORE_FILE')).exists()) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                setSigningConfig(signingConfigs.release)
            }
        }
    }
    else {
        println 'no keystore configured'
    }
}
