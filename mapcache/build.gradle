apply plugin: 'com.android.application'

def googleMapsApiReleaseKey = hasProperty('RELEASE_MAPS_MAPCACHE_API_KEY') ? RELEASE_MAPS_MAPCACHE_API_KEY : ''
def googleMapsApiKeyDebug = hasProperty('DEBUG_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY : ''

android {
    compileSdkVersion 30

    dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "mil.nga.mapcache"
        resValue "string", "applicationId", applicationId
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 37
        versionName '2.0.10'
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }
        debug {
            applicationIdSuffix ".test"
            resValue "string", "applicationId", defaultConfig.applicationId + applicationIdSuffix
            minifyEnabled false
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiKeyDebug
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

task androidAppVersion {
    doLast {
        println "versionCode: ${android.defaultConfig.applicationId}@${android.defaultConfig.versionCode}"
        println "versionName: ${android.defaultConfig.applicationId}@${android.defaultConfig.versionName}"
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api 'androidx.appcompat:appcompat:1.1.0'
    api 'com.google.android.material:material:1.0.0'
    api 'androidx.preference:preference:1.1.1'
    api 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    api 'mil.nga.geopackage.map:geopackage-android-map:4.0.0' // comment out to build locally
    //api project(':geopackage-map') // uncomment me to build locally
    api 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.gms:play-services-location:17.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-alpha01'
    testImplementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.13.1'
    implementation 'org.piwik.sdk:piwik-sdk:2.0.0'
}

configure extensions.android, {
    if (project.hasProperty('RELEASE_STORE_FILE') && new File((String) project.getProperty('RELEASE_STORE_FILE')).exists()) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                setSigningConfig(signingConfigs.release)
            }
        }
    } else {
        println 'no keystore configured'
    }
}

// This is to fix the errors : java.lang.NoClassDefFoundError: Failed resolution of: Landroid/view/View$OnUnhandledKeyEventListener;
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "androidx") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
