apply plugin: 'com.android.application'

def googleMapsApiReleaseKey = hasProperty('RELEASE_MAPS_MAPCACHE_API_KEY') ? RELEASE_MAPS_MAPCACHE_API_KEY: ''
def googleMapsApiKeyDebug = hasProperty('DEBUG_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY: ''

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "mil.nga.mapcache"
        minSdkVersion 19
        targetSdkVersion 33
        versionCode 39
        versionName '1.38'
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }
        debug {
            minifyEnabled false
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiKeyDebug
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt']
        }
    }

}

task androidAppVersion {
    doLast {
        println "versionCode: ${android.defaultConfig.applicationId}@${android.defaultConfig.versionCode}"
        println "versionName: ${android.defaultConfig.applicationId}@${android.defaultConfig.versionName}"
    }
}

dependencies {
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'mil.nga.geopackage.map:geopackage-android-map:6.4.0' // comment out to build locally
    //api project(':geopackage-map') // uncomment me to build locally
    api 'androidx.multidex:multidex:2.0.1'
    testImplementation 'androidx.multidex:multidex:2.0.1'
}

configure extensions.android, {
    if (project.hasProperty('RELEASE_STORE_FILE') && new File((String)project.getProperty('RELEASE_STORE_FILE')).exists()) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                setSigningConfig(signingConfigs.release)
            }
        }
    }
    else {
        println 'no keystore configured'
    }
}
